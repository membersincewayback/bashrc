#!/usr/bin/env bash

cidr() {
    local input="${1#/}"

    local -A cidr_dict=(
        [32]="255.255.255.255"  [31]="255.255.255.254"  [30]="255.255.255.252"
        [29]="255.255.255.248"  [28]="255.255.255.240"  [27]="255.255.255.224"
        [26]="255.255.255.192"  [25]="255.255.255.128"  [24]="255.255.255.0"
        [23]="255.255.254.0"    [22]="255.255.252.0"    [21]="255.255.248.0"
        [20]="255.255.240.0"    [19]="255.255.224.0"    [18]="255.255.192.0"
        [17]="255.255.128.0"    [16]="255.255.0.0"      [15]="255.254.0.0"
        [14]="255.252.0.0"      [13]="255.248.0.0"      [12]="255.240.0.0"
        [11]="255.224.0.0"      [10]="255.192.0.0"      [9]="255.128.0.0"
        [8]="255.0.0.0"         [7]="254.0.0.0"         [6]="252.0.0.0"
        [5]="248.0.0.0"         [4]="240.0.0.0"         [3]="224.0.0.0"
        [2]="192.0.0.0"         [1]="128.0.0.0"         [0]="0.0.0.0"
    )

    [[ -n "${cidr_dict["$input"]}" ]] && { printf "%s\n" "${cidr_dict["$input"]}"; return 0; }

    for cidr in "${!cidr_dict[@]}"; do
        [[ "${cidr_dict[$cidr]}" == "$input" ]] && { printf "/%s\n" "$cidr"; return 0; }
    done

    printf "Enter CIDR notation ('/24') or subnet mask ('255.255.255.0')\n" >&2; return 1
}

pd() {
    { case "$1" in
        +[0-9]) pushd "$1" || return 1 ;;
        -[0-9]) popd +"${1//[!0-9]/}" || return 1 ;;
        -) popd || return 1 ;;
        -c) dirs -c ;;
        *) pushd "$@" || return 1 ;;
    esac
    } > /dev/null
    dirs -v
}

killbg() {
    local array confirm pid

    readarray -t array < <(jobs -p)
    [[ -z "${array[*]}" ]] && { printf "killbg: no such job\n" >&2; return 1; }
    [[ -z "$1" ]] && {
        jobs -l
        read -erp "Kill: ${array[*]}? [y/N]: " confirm
        [[ "${confirm,,}" =~ ^y(es)?$ ]] || return 0; }
    for pid in "${array[@]}"; do kill "${1:--15}" "$pid"; done
    sleep .1; jobs
}

clean_history() {
    local hist hist_tmp
    hist="${HOME}/.bash_history"

    if [[ -f "$hist" ]]; then
        hist_tmp="$(tac "$hist" | awk '{$1=$1}1 && !x[$0]++' | tac)"
        echo "$hist_tmp" > "$hist"
    fi
}

extract() {
    case "$1" in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz) tar xzf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) rar x "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xf "$1" ;;
        *.tbz2) tar xjf "$1" ;;
        *.tgz) tar xzf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) printf "%s cannot be extracted" "$1" >&2; return 1 ;;
    esac
}

compress() {
    if [[ -z "$1" ]]; then
        printf "compress: must provide file/directory path\n" 1>&2; return 1
    elif [[ -d "$1" ]]; then
        tar -czf "${1%/}.tar.gz" "$1";
    elif [[ -f "$1" ]]; then
        tar -czf "${1}.gz" "$1";
    else
        printf "compress: %s: invalid path\n" "$1" 1>&2; return 1
    fi
}

checkmounts() {
    local mount

    while read -r mount; do
        if ! findmnt "$mount" &> /dev/null; then
            printf "\033[31m%s is declared in fstab but not mounted\n\033[0m" "$mount" >&2
        else
            printf "%s is mounted properly\n" "$mount"
        fi
    done < <(awk '!/^#/ && $2~/^[/]/ {print $2}' /etc/fstab)
}

checkfs() {
    local mount

    timeout 2 df &> /dev/null || { printf "Hung mount detected.\n" >&2; return 1; }
    while read -r mount; do
        findmnt "$mount" &> /dev/null || {
        printf "%s is declared in fstab but not mounted\n" "$mount" >&2; }
    done < <(awk '!/^#/ && $2~/^[/]/ {print $2}' /etc/fstab)
    printf "Full File Systems:\n%s\n" "$(df -h | grep "100%" || printf "None\n")"
    printf "Full Inodes:\n%s\n" "$(df -i | grep "100%" || printf "None\n")"
}

thetime() {
    local zulu central

    zulu="$(date -u +"%a %b %-d, %Y - %R:%S")"
    central="$(TZ="America/Chicago" date +"%a %b %-d, %Y - %R:%S")"

    printf "CDT: %s\nUTC: %s\n" "$central" "$zulu"
}
